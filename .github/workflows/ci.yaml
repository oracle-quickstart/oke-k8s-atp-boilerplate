# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ development, master ]
    # paths: [ src/ ]
  pull_request:
    branches: [ development, master ]
    # paths: [ src/ ]
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  all:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env: 
      SERVICE: ${{ matrix.service }}
      DOCKER_USERNAME: '${{ secrets.DOCKER_USERNAME }}'
      DOCKER_PASSWORD: '${{ secrets.DOCKER_PASSWORD }}'
      TENANCY_NAMESPACE: '${{ secrets.TENANCY_NAMESPACE }}'
      OCI_CONFIG: ${{ secrets.OCI_CONFIG }}
      CI_USER_KEY: ${{ secrets.CI_USER_KEY }}
      KUBE_CONFIG_SECRET: ${{ secrets.KUBE_CONFIG }}


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: git clone
        uses: actions/checkout@v2

      - name: Setup
        run: |
          ./scripts/setup.sh

      - name: Cache python
        uses: actions/cache@v2
        env:
          cache-name: cache-python
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/requirements.*.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: lint
        run: |

          echo "TENANCY_NAMESPACE=${TENANCY_NAMESPACE}" > creds.env
          echo "DOCKER_USERNAME=${DOCKER_USERNAME}" >> creds.env
          echo "DOCKER_PASSWORD=${DOCKER_PASSWORD}" >> creds.env
          
          echo ${{ github.event_name }}
          echo ${{ github.event.type }}
          echo ${{ github.ref }}
          ${{ github.event.pull_request.base.ref }}
          
          make install-all
          make lint-all

      - name: unit tests
        run: |
          echo "tests of the code before building the image"

      # Runs a set of commands using the runners shell
      - name: Build / publish docker images with digest
        run: |
          make repo-login
          make build

      - name: image tests
        run: |
          echo "tests of the built images here"

      # - name: deploy development
      #   if: ${{ github.ref == '/refs/heads/development'  && github.event_name != 'release' }}
      #   run: |
      #     # deploy to dev when pushing to pushing or merging to development

      #     export DEPS=${HOME}/deps
      #     export PATH=$PATH:~/bin/:$DEPS
      #     # set KUBECONFIG env variable for kubectl to use as it won't find the file here.
      #     export KUBECONFIG=./kube_config

      #     make deploy-infra
      #     make deploy

      # - name: deploy staging
      #   if: ${{ github.ref == '/refs/heads/master' && github.event_name != 'release' }}
      #   run: |
      #     # deploy to staging when pushing to pushing or merging to master

      #     export DEPS=${HOME}/deps
      #     export PATH=$PATH:~/bin/:$DEPS
      #     # set KUBECONFIG env variable for kubectl to use as it won't find the file here.
      #     export KUBECONFIG=./kube_config

      #     make deploy-infra ENVIRONMENT=staging
      #     make deploy ENVIRONMENT=staging

      # - name: deploy to prod
      #   if: ${{ github.ref == '/refs/heads/master' && github.event_name == 'release' }}
      #   run: |
      #     # deploy to production on published release

      #     export DEPS=${HOME}/deps
      #     export PATH=$PATH:~/bin/:$DEPS
      #     # set KUBECONFIG env variable for kubectl to use as it won't find the file here.
      #     export KUBECONFIG=./kube_config

      #     make deploy-infra ENVIRONMENT=production
      #     make deploy ENVIRONMENT=production
